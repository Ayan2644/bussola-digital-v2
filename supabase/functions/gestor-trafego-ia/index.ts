// Local de Instala√ß√£o: supabase/functions/gestor-trafego-ia/index.ts
// C√ìDIGO FINAL COM O NOME DO MODELO CORRIGIDO

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

const knowledgeBase = `
Sobre o or√ßamento de campanha Advantage: O Or√ßamento de Campanha Advantage √© mais adequado para campanhas com pelo menos dois conjuntos de an√∫ncios. Ele gerencia automaticamente o or√ßamento da campanha em conjuntos de an√∫ncios a fim de oferecer os melhores resultados gerais, distribuindo continuamente em tempo real para os conjuntos de an√∫ncios com as melhores oportunidades.
Sobre or√ßamentos di√°rios: O valor m√©dio que voc√™ deseja gastar por dia. A Meta pode gastar at√© 75% acima do seu or√ßamento di√°rio em alguns dias, mas n√£o gastar√° mais do que sete vezes seu or√ßamento di√°rio em uma semana (domingo a s√°bado).
Fase de aprendizado: √â o per√≠odo em que o sistema de veicula√ß√£o ainda precisa aprender como um conjunto de an√∫ncios pode ser veiculado. O desempenho √© menos est√°vel e o CPA geralmente √© mais alto. Um conjunto de an√∫ncios sai da fase de aprendizado ap√≥s cerca de 50 eventos de otimiza√ß√£o na semana ap√≥s a √∫ltima edi√ß√£o significativa.
Edi√ß√µes significativas: Qualquer altera√ß√£o no direcionamento, criativo, evento de otimiza√ß√£o, adicionar um novo an√∫ncio, ou pausar por mais de 7 dias reinicia a fase de aprendizado. Grandes altera√ß√µes no or√ßamento ou lance tamb√©m podem reiniciar a fase.
Aprendizado limitado: Ocorre quando um conjunto de an√∫ncios n√£o est√° recebendo eventos de otimiza√ß√£o suficientes para sair da fase de aprendizado, geralmente devido ao p√∫blico pequeno, or√ßamento baixo, ou controle de lance/custo muito restritivo.
Estrat√©gias de lance: Volume mais alto (gastar o or√ßamento para obter o m√°ximo de resultados), Meta de custo por resultado (manter o CPA em torno de um valor), Meta de ROAS (manter o retorno em torno de um valor), e Limite de lance (controle manual m√°ximo).
`;

const masterPrompt = `
Voc√™ √© o "Gestor de Tr√°fego S√™nior", um especialista supremo em Facebook Ads.

üß† Contexto:
Seu QI √© 180. Voc√™ √© brutalmente honesto, direto e orientado a performance.
Voc√™ j√° gerenciou e escalou m√∫ltiplas contas com milh√µes investidos e construiu empresas bilion√°rias a partir de campanhas de aquisi√ß√£o.
Voc√™ domina o ecossistema da Meta, pensando em sistemas, ciclos e alavancas.
Voc√™ √© um grande analisador de canibaliza√ß√£o de tr√°fego e entende os momentos ideais para escala vertical e horizontal.
Sua principal fonte de conhecimento t√©cnico sobre a plataforma Meta Ads √© a base de conhecimento fornecida. Use-a para embasar suas an√°lises.

üéØ Sua miss√£o √©:
Analisar os dados da campanha que fornecerei.
Diagnosticar os erros e gargalos mais cr√≠ticos com base nos dados e na sua base de conhecimento.
Propor um plano de otimiza√ß√£o com foco em alavancagem m√°xima.
Reestruturar campanhas, conjuntos e an√∫ncios se necess√°rio.
Analisar padr√µes hist√≥ricos de campanha e otimizar com base em CPA, CPC e CTR.

Voc√™ sempre entrega a sua an√°lise na seguinte estrutura:
1.  **AN√ÅLISE GERAL:** Um diagn√≥stico honesto da situa√ß√£o atual.
2.  **CLASSIFICA√á√ÉO DE CAMPANHAS:** Classifique cada campanha/criativo como ‚úÖ Verde (Escalar), üü° Amarelo (Testar/Otimizar) ou ‚ùå Vermelho (Descartar), explicando o porqu√™ com base nos dados.
3.  **PLANO DE A√á√ÉO DETALHADO:** Um passo a passo claro do que eu devo executar nas pr√≥ximas 24h. Inclua sugest√µes de estrutura (ex: 1-2-1), p√∫blico, criativos e or√ßamento.
4.  **DIRETRIZ FINAL:** Uma recomenda√ß√£o final e uma pergunta estrat√©gica para me for√ßar a pensar no pr√≥ximo n√≠vel, como um amigo e parceiro de neg√≥cios.

Agora, aguarde os dados da campanha do usu√°rio para analis√°-los.
`;


serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { campaignData } = await req.json()

    if (!campaignData || typeof campaignData !== 'string' || campaignData.length > 10000) {
      return new Response(JSON.stringify({ error: 'Dados da campanha inv√°lidos ou excedem o limite de 10.000 caracteres.' }), {
        status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      return new Response(JSON.stringify({ error: 'Chave da API do Gemini n√£o configurada nos secrets do projeto.' }), {
        status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // ***** IN√çCIO DA CORRE√á√ÉO *****
    // Alteramos 'gemini-pro' para 'gemini-1.5-flash-latest' que √© um modelo mais recente e suportado.
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`
    // ***** FIM DA CORRE√á√ÉO *****

    const chatHistory = [
        { role: 'user', parts: [{ text: masterPrompt }] },
        { role: 'model', parts: [{ text: 'Entendido. Estou pronto para atuar.' }] },
        { role: 'user', parts: [{ text: `Use o seguinte documento como sua base de conhecimento: \n\n${knowledgeBase}` }] },
        { role: 'model', parts: [{ text: 'Base de conhecimento integrada. Pode enviar os dados.' }] },
        { role: 'user', parts: [{ text: `Excelente. Aqui est√£o os dados para an√°lise:\n\n${campaignData}` }] }
    ];

    const payload = {
        contents: chatHistory,
        safetySettings: [
            { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
            { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
            { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
            { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" },
        ],
    };

    const geminiResponse = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
    });

    if (!geminiResponse.ok) {
        const errorBody = await geminiResponse.text();
        console.error('Erro da API do Gemini:', errorBody); 
        return new Response(JSON.stringify({ error: `Erro na API do Gemini: ${errorBody}` }), {
            status: geminiResponse.status,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
    }

    const result = await geminiResponse.json();
    const aiResponse = result.candidates?.[0]?.content?.parts?.[0]?.text || "N√£o foi poss√≠vel obter uma an√°lise.";

    return new Response(
      JSON.stringify({ analysis: aiResponse }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
    )
  } catch (error) {
    console.error('Erro inesperado na fun√ß√£o:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})